# roles/zabbix-server/tasks/ssl_certificate.yml
---
- name: Création du répertoire SSL
  file:
    path: /etc/ssl/{{ item }}
    state: directory
    mode: '0755'
  loop:
    - certs
    - private

- name: Génération de la clé privée SSL
  openssl_privatekey:
    path: "{{ ssl_private_key_path }}"
    size: 2048
    mode: '0600'

- name: Génération de la demande de certificat
  openssl_csr:
    path: /tmp/apache-selfsigned.csr
    privatekey_path: "{{ ssl_private_key_path }}"
    common_name: "{{ ansible_default_ipv4.address }}"
    organization_name: "{{ company_name | default('Self-Signed') }}"
    country_name: FR
    state_or_province_name: "Ile-de-France"
    locality_name: "Paris"

- name: Génération du certificat auto-signé
  openssl_certificate:
    path: "{{ ssl_certificate_path }}"
    privatekey_path: "{{ ssl_private_key_path }}"
    csr_path: /tmp/apache-selfsigned.csr
    provider: selfsigned
    selfsigned_not_after: "+365d"

---

# roles/zabbix-server/templates/zabbix-apache-ssl.conf.j2
<VirtualHost *:80>
    ServerName {{ ansible_default_ipv4.address }}
    Redirect permanent / https://{{ ansible_default_ipv4.address }}/
</VirtualHost>

<VirtualHost *:443>
    ServerName {{ ansible_default_ipv4.address }}
    DocumentRoot /usr/share/zabbix

    SSLEngine on
    SSLCertificateFile {{ ssl_certificate_path }}
    SSLCertificateKeyFile {{ ssl_private_key_path }}

    # Sécurité SSL moderne
    SSLProtocol all -SSLv2 -SSLv3 -TLSv1 -TLSv1.1
    SSLCipherSuite ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384
    SSLHonorCipherOrder on
    SSLCompression off

    # Headers de sécurité RGPD
    Header always set Strict-Transport-Security "max-age=31536000; includeSubDomains"
    Header always set X-Content-Type-Options nosniff
    Header always set X-Frame-Options DENY
    Header always set X-XSS-Protection "1; mode=block"
    Header always set Referrer-Policy "strict-origin-when-cross-origin"
    Header always set Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'"

    # Configuration PHP pour Zabbix
    php_value max_execution_time {{ php_max_execution_time }}
    php_value memory_limit {{ php_memory_limit }}
    php_value post_max_size {{ php_post_max_size }}
    php_value upload_max_filesize {{ php_upload_max_filesize }}
    php_value max_input_time {{ php_max_input_time }}
    php_value max_input_vars 10000
    php_value always_populate_raw_post_data -1
    php_value date.timezone {{ php_timezone }}

    <Directory "/usr/share/zabbix">
        Options FollowSymLinks
        AllowOverride None
        Require all granted

        <IfModule mod_php.c>
            php_value upload_tmp_dir /tmp
            php_value session.auto_start 0
            php_value mbstring.func_overload 0
        </IfModule>
    </Directory>

    <Directory "/usr/share/zabbix/conf">
        Require all denied
    </Directory>

    <Directory "/usr/share/zabbix/app">
        Require all denied
    </Directory>

    <Directory "/usr/share/zabbix/include">
        Require all denied
    </Directory>

    <Directory "/usr/share/zabbix/local">
        Require all denied
    </Directory>

    ErrorLog ${APACHE_LOG_DIR}/zabbix_error.log
    CustomLog ${APACHE_LOG_DIR}/zabbix_access.log combined
</VirtualHost>

---

# Makefile pour faciliter l'utilisation
# Makefile
.PHONY: help install deploy check test clean backup

INVENTORY = inventory/hosts.yml
PLAYBOOK = site.yml
VAULT_FILE = group_vars/all/vault.yml

help:
	@echo "Commandes disponibles :"
	@echo "  install     - Installation des dépendances"
	@echo "  deploy      - Déploiement complet"
	@echo "  check       - Vérification de la configuration"
	@echo "  test        - Test de connectivité"
	@echo "  backup      - Sauvegarde de la configuration"
	@echo "  clean       - Nettoyage des fichiers temporaires"

install:
	@echo "Installation des collections Ansible..."
	ansible-galaxy collection install -r requirements.yml
	@echo "Création de la structure des dossiers..."
	mkdir -p logs group_vars/all host_vars

deploy:
	@echo "Déploiement en cours..."
	ansible-playbook -i $(INVENTORY) $(PLAYBOOK) --ask-vault-pass

check:
	@echo "Vérification de la configuration..."
	ansible-playbook -i $(INVENTORY) $(PLAYBOOK) --check --diff

test:
	@echo "Test de connectivité..."
	ansible all -i $(INVENTORY) -m ping

backup:
	@echo "Sauvegarde en cours..."
	tar -czf backup-$(shell date +%Y%m%d-%H%M%S).tar.gz \
		inventory/ group_vars/ roles/ site.yml ansible.cfg

clean:
	@echo "Nettoyage..."
	rm -rf logs/*.log
	rm -rf /tmp/ansible-*

---

# requirements.yml - Collections Ansible requises
---
collections:
  - name: community.general
    version: ">=7.0.0"
  - name: community.mysql
    version: ">=3.0.0"
  - name: community.crypto
    version: ">=2.0.0"
  - name: ansible.posix
    version: ">=1.0.0"

---

# .gitignore
# Fichiers Ansible
*.retry
logs/
.ansible/
.vault_pass

# Fichiers de configuration sensibles
group_vars/*/vault.yml
host_vars/*/vault.yml
vault_pass.txt

# Fichiers temporaires
*.tmp
*.backup
*.log

# Sauvegardes
backup-*.tar.gz

# OS
.DS_Store
Thumbs.db

# IDE
.vscode/
.idea/
*.swp
*.swo

---

# Installation automatique - install.sh
#!/bin/bash

echo "=== Installation des prérequis pour Debian 12 + Zabbix + RGPD ==="

# Mise à jour du système
sudo apt update

# Installation d'Ansible et des outils nécessaires
sudo apt install -y \
    ansible \
    python3-pip \
    python3-pymysql \
    python3-cryptography \
    git \
    curl \
    wget

# Installation des modules Python pour Ansible
pip3 install --user \
    ansible \
    pymysql \
    cryptography \
    jinja2

# Installation des collections Ansible
ansible-galaxy collection install community.general
ansible-galaxy collection install community.mysql
ansible-galaxy collection install community.crypto
ansible-galaxy collection install ansible.posix

# Création de la structure de dossiers
mkdir -p {logs,group_vars/all,host_vars}

echo "=== Installation terminée ==="
echo "Modifiez inventory/hosts.yml puis lancez ./deploy.sh"